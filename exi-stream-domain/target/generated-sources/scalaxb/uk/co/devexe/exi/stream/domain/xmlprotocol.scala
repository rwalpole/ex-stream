// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package uk.co.devexe.exi.stream.domain

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[uk.co.devexe.exi.stream.domain.Foo](node)
val document = scalaxb.toXML[uk.co.devexe.exi.stream.domain.Foo](obj, "foo", uk.co.devexe.exi.stream.domain.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val DomainForecastFormat: scalaxb.XMLFormat[uk.co.devexe.exi.stream.domain.Forecast] = new DefaultDomainForecastFormat {}

  trait DefaultDomainForecastFormat extends scalaxb.XMLFormat[uk.co.devexe.exi.stream.domain.Forecast] with scalaxb.CanWriteChildNodes[uk.co.devexe.exi.stream.domain.Forecast] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, uk.co.devexe.exi.stream.domain.Forecast] = seq match {
      case node: scala.xml.Node => Right(uk.co.devexe.exi.stream.domain.Forecast(scala.collection.immutable.ListMap(List(
        (node \ "@site-id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@site-id" -> _ },
        (node \ "@time-step").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@time-step" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: uk.co.devexe.exi.stream.domain.Forecast, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@site-id", _) => __obj.siteu45id foreach { x => attr = scala.xml.Attribute(null, "site-id", x.toString, attr) }
        case ("@time-step", _) => __obj.timeu45step foreach { x => attr = scala.xml.Attribute(null, "time-step", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: uk.co.devexe.exi.stream.domain.Forecast, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


}

